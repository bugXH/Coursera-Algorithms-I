import java.util.Arrays;
import java.util.ArrayList;

import edu.princeton.cs.algs4.*;

public class FastCollinearPoints {
	private LineSegment[] segs;
	
    public FastCollinearPoints(Point[] points) { // finds all line segments containing 4 or more points
    	// check null arguments
		if (points == null) {
			throw new java.lang.NullPointerException("Array is null!");
		}
		for (int i = 0; i < points.length; i++) {
			if (points[i] == null) {
				throw new java.lang.NullPointerException("Null entry in array!");
			}
		}
		// check duplications
		for (int i = 0; i < points.length - 1; i++) {
			for (int j = i + 1; j < points.length; j++) {
				if (points[i].compareTo(points[j]) == 0) {
					throw new java.lang.IllegalArgumentException("A repeated point is in the array!");
				}
			}
		}
		Point[] pointsorted = Arrays.copyOf(points, points.length);
		for (Point pointp: points) {
			Arrays.sort(pointsorted, pointp.slopeOrder());
			ArrayList<Point> colltmp = new ArrayList<Point>();
			double slope = pointp.slopeTo(pointsorted[0]);
			Point start = pointsorted[0], end = pointsorted[0];
			for (Point pointq: pointsorted) {
				if (pointq == pointp) {
					continue;
				}
				double slope1 = pointp.slopeTo(pointq);
//				System.out.println(slope1);
				if (slope1 == slope) {
					colltmp.add(pointq);
					if (pointq.compareTo(start) < 0) {
						start = pointq;
					}
					if (pointq.compareTo(end) > 0) {
						end = pointq;
					}
				}
			}
		}
    }
   
    public int numberOfSegments() {   // the number of line segments
	   return segs.length;
    }
   
//    public LineSegment[] segments() {      // the line segments
//	   
//    }
    
    public static void main(String[] args) {
		// read the N points from a file
	    In in = new In(args[0]);
	    int N = in.readInt();
	    Point[] points = new Point[N];
	    for (int i = 0; i < N; i++) {
	        int x = in.readInt();
	        int y = in.readInt();
	        points[i] = new Point(x, y);
	    }

	    // draw the points
//	    StdDraw.show(0);
//	    StdDraw.setXscale(0, 32768);
//	    StdDraw.setYscale(0, 32768);
//	    for (Point p : points) {
//	        p.draw();
//	    }
//	    StdDraw.show();

	    // print and draw the line segments
	    FastCollinearPoints collinear = new FastCollinearPoints(points);
//	    for (LineSegment segment : collinear.segments()) {
//	        StdOut.println(segment);
//	        segment.draw();
//	    }
	}
}
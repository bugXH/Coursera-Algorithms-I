import java.util.ArrayList;

import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.RectHV;
import edu.princeton.cs.algs4.SET;
import edu.princeton.cs.algs4.StdDraw;

public class PointSET {
	private SET<Point2D> set;
	public PointSET() { // construct an empty set of points 
		set = new SET<Point2D>();
	}
	
	public boolean isEmpty() { // is the set empty?
		return set.isEmpty();
	}
	
	public int size() {  // number of points in the set 
		return set.size();
	}
	
	public void insert(Point2D p) { // add the point to the set (if it is not already in the set)
		if (p == null) {
			throw new java.lang.NullPointerException("null argument!");
		}
		set.add(p);
	}
	
	public boolean contains(Point2D p) { // does the set contain point p? 
		if (p == null) {
			throw new java.lang.NullPointerException("null argument!");
		}
		return set.contains(p);
	}
	
	public void draw() {  // draw all points to standard draw 
		for (Point2D p: set) {
			StdDraw.point(p.x(), p.y());
		}
	}
	
	public Iterable<Point2D> range(RectHV rect) {  // all points that are inside the rectangle 
		ArrayList<Point2D> inrange = new ArrayList<Point2D>();
		for (Point2D p: set) {
			if (rect.contains(p)) {
				inrange.add(p);
			}
		}
		return inrange;
	}
	
	public Point2D nearest(Point2D p) {  // a nearest neighbor in the set to point p; null if the set is empty 
		Point2D nearest = null;
		double nearestdist = 1, current_dist;
		for (Point2D q: set) {
			current_dist = p.distanceTo(q);
			if (current_dist < nearestdist) {
				nearestdist = 
				nearest = q;
			}
		}
		return nearest;
		
	}
	
	public static void main(String[] args) { // unit testing of the methods (optional)

	}
	
}
